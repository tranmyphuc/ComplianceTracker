import React from 'react';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { InfoIcon, AlertTriangleIcon, AlertCircleIcon, CheckCircleIcon } from "lucide-react";

export enum ConfidenceLevel {
  HIGH = 'high',
  MEDIUM = 'medium',
  LOW = 'low',
  UNCERTAIN = 'uncertain'
}

export enum ReviewStatus {
  VALIDATED = 'validated',
  PENDING_REVIEW = 'pending_review',
  REQUIRES_LEGAL_REVIEW = 'requires_legal_review',
  OUTDATED = 'outdated'
}

interface LegalDisclaimerProps {
  confidenceLevel?: ConfidenceLevel;
  reviewStatus?: ReviewStatus;
  showTimestamp?: boolean;
  issues?: string[];
  warnings?: string[];
  isAssessment?: boolean;
  isTraining?: boolean;
  generatedDate?: Date;
  className?: string;
}

export const LegalDisclaimer: React.FC<LegalDisclaimerProps> = ({
  confidenceLevel = ConfidenceLevel.MEDIUM,
  reviewStatus = ReviewStatus.VALIDATED,
  showTimestamp = true,
  issues = [],
  warnings = [],
  isAssessment = false,
  isTraining = false,
  generatedDate = new Date(),
  className = ''
}) => {
  // Determine alert variant based on review status
  let variant: "default" | "destructive" | null = null;
  let icon = <InfoIcon className="h-4 w-4" />;
  
  if (reviewStatus === ReviewStatus.REQUIRES_LEGAL_REVIEW || confidenceLevel === ConfidenceLevel.LOW) {
    variant = "destructive";
    icon = <AlertTriangleIcon className="h-4 w-4" />;
  } else if (reviewStatus === ReviewStatus.OUTDATED) {
    variant = "destructive";
    icon = <AlertCircleIcon className="h-4 w-4" />;
  } else if (reviewStatus === ReviewStatus.VALIDATED && confidenceLevel === ConfidenceLevel.HIGH) {
    icon = <CheckCircleIcon className="h-4 w-4" />;
  }
  
  // Get confidence badge color
  const getConfidenceBadgeColor = () => {
    switch (confidenceLevel) {
      case ConfidenceLevel.HIGH:
        return "bg-green-100 text-green-800 hover:bg-green-100";
      case ConfidenceLevel.MEDIUM:
        return "bg-blue-100 text-blue-800 hover:bg-blue-100";
      case ConfidenceLevel.LOW:
        return "bg-yellow-100 text-yellow-800 hover:bg-yellow-100";
      case ConfidenceLevel.UNCERTAIN:
        return "bg-red-100 text-red-800 hover:bg-red-100";
      default:
        return "bg-gray-100 text-gray-800 hover:bg-gray-100";
    }
  };
  
  // Select appropriate disclaimer text based on content type
  const getDisclaimerText = () => {
    if (isTraining) {
      return "This training material provides general guidance on EU AI Act compliance and should not be considered comprehensive legal advice. Legal requirements may vary based on your specific circumstances and the content is subject to change as regulatory interpretations evolve.";
    } else if (isAssessment) {
      return "This assessment is provided for informational purposes only and does not constitute legal advice. The analysis is generated by AI models and should be reviewed by qualified legal professionals before making compliance decisions.";
    } else {
      return "The information provided is for general informational purposes only and does not constitute legal advice. Consult with qualified legal professionals for specific guidance on EU AI Act compliance for your organization.";
    }
  };
  
  return (
    <Alert variant={variant} className={`my-4 ${className}`}>
      <AlertTitle className="flex items-center justify-between">
        <span className="flex items-center">
          {icon}
          <span className="ml-2">Legal Disclaimer</span>
        </span>
        <Badge className={`font-normal ${getConfidenceBadgeColor()}`}>
          {confidenceLevel.charAt(0).toUpperCase() + confidenceLevel.slice(1)} Confidence
        </Badge>
      </AlertTitle>
      <AlertDescription>
        <div className="mt-2">
          <p>{getDisclaimerText()}</p>
          
          {reviewStatus === ReviewStatus.REQUIRES_LEGAL_REVIEW && (
            <p className="mt-2 font-semibold">This content requires professional legal review before implementation.</p>
          )}
          
          {reviewStatus === ReviewStatus.PENDING_REVIEW && (
            <p className="mt-2 font-semibold">This content is currently pending expert legal review.</p>
          )}
          
          {reviewStatus === ReviewStatus.OUTDATED && (
            <p className="mt-2 font-semibold">This content may be outdated due to regulatory changes.</p>
          )}
          
          {(issues.length > 0 || warnings.length > 0) && (
            <div className="mt-2">
              {issues.length > 0 && (
                <div className="mt-1">
                  <p className="font-semibold text-red-600">Issues:</p>
                  <ul className="list-disc pl-5 text-sm text-red-600">
                    {issues.map((issue, index) => (
                      <li key={`issue-${index}`}>{issue}</li>
                    ))}
                  </ul>
                </div>
              )}
              
              {warnings.length > 0 && (
                <div className="mt-1">
                  <p className="font-semibold text-amber-600">Warnings:</p>
                  <ul className="list-disc pl-5 text-sm text-amber-600">
                    {warnings.map((warning, index) => (
                      <li key={`warning-${index}`}>{warning}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          )}
          
          {showTimestamp && (
            <p className="mt-2 text-xs text-gray-500">
              Generated on {generatedDate.toLocaleDateString()} based on current understanding of the EU AI Act.
            </p>
          )}
        </div>
      </AlertDescription>
    </Alert>
  );
};

export default LegalDisclaimer;